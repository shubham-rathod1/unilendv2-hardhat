{
	"compiler": {
		"version": "0.6.2+commit.bacdbe57"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Interface of the ERC2612 standard as defined in the EIP. * Adds the {permit} method, which can be used to change one's {IERC20-allowance} without having to send a transaction, by signing a message. This allows users to spend tokens without having to hold Ether. * See https://eips.ethereum.org/EIPS/eip-2612.",
			"methods": {
				"nonces(address)": {
					"details": "Returns the current ERC2612 nonce for `owner`. This value must be included whenever a signature is generated for {permit}.     * Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Sets `amount` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval.     * IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here.     * Emits an {Approval} event.     * Requirements:     * - `owner` cannot be the zero address. - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}).     * For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"ERC20.sol": "IERC2612Permit"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ERC20.sol": {
			"keccak256": "0xe5bcbefc02f80b7477f0810b17666b89f45c7ba75ad7fb623cdf715668d2ace5",
			"urls": [
				"bzz-raw://6edeffd1f0d9c269b25d4b7f0f4d2493596666489814c487d7bc1b5bdbff2413",
				"dweb:/ipfs/QmQGunwjqiMjppFK4Nq7jZAK27HUUa1Rwh9uXC6pMvTLBU"
			]
		}
	},
	"version": 1
}